/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface UpdateArticle$Params {
  id: number;
  title: string;
  abstract_: string;
  isbn: string;
  coverImage: string;
  authorAffiliation: string;
  affiliation: string;
  domainName: string;
      body?: {
'file'?: Blob;
}
}

export function updateArticle(http: HttpClient, rootUrl: string, params: UpdateArticle$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
  const rb = new RequestBuilder(rootUrl, updateArticle.PATH, 'put');
  if (params) {
    rb.path('id', params.id, {});
    rb.query('title', params.title, {});
    rb.query('abstract_', params.abstract_, {});
    rb.query('isbn', params.isbn, {});
    rb.query('coverImage', params.coverImage, {});
    rb.query('authorAffiliation', params.authorAffiliation, {});
    rb.query('affiliation', params.affiliation, {});
    rb.query('domainName', params.domainName, {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<{
      }>;
    })
  );
}

updateArticle.PATH = '/articles/update/{id}';
