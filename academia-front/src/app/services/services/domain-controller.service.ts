/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Article } from '../models/article';
import { createDomain } from '../fn/domain-controller/create-domain';
import { CreateDomain$Params } from '../fn/domain-controller/create-domain';
import { deleteDomainById } from '../fn/domain-controller/delete-domain-by-id';
import { DeleteDomainById$Params } from '../fn/domain-controller/delete-domain-by-id';
import { Domain } from '../models/domain';
import { getAllDomains } from '../fn/domain-controller/get-all-domains';
import { GetAllDomains$Params } from '../fn/domain-controller/get-all-domains';
import { getArticlesByDomain } from '../fn/domain-controller/get-articles-by-domain';
import { GetArticlesByDomain$Params } from '../fn/domain-controller/get-articles-by-domain';
import { updateDomainById } from '../fn/domain-controller/update-domain-by-id';
import { UpdateDomainById$Params } from '../fn/domain-controller/update-domain-by-id';

@Injectable({ providedIn: 'root' })
export class DomainControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateDomainById()` */
  static readonly UpdateDomainByIdPath = '/domains/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDomainById()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDomainById$Response(params: UpdateDomainById$Params, context?: HttpContext): Observable<StrictHttpResponse<Domain>> {
    return updateDomainById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDomainById$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDomainById(params: UpdateDomainById$Params, context?: HttpContext): Observable<Domain> {
    return this.updateDomainById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Domain>): Domain => r.body)
    );
  }

  /** Path part for operation `deleteDomainById()` */
  static readonly DeleteDomainByIdPath = '/domains/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDomainById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDomainById$Response(params: DeleteDomainById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteDomainById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDomainById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDomainById(params: DeleteDomainById$Params, context?: HttpContext): Observable<void> {
    return this.deleteDomainById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllDomains()` */
  static readonly GetAllDomainsPath = '/domains';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDomains()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDomains$Response(params?: GetAllDomains$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Domain>>> {
    return getAllDomains(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDomains$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDomains(params?: GetAllDomains$Params, context?: HttpContext): Observable<Array<Domain>> {
    return this.getAllDomains$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Domain>>): Array<Domain> => r.body)
    );
  }

  /** Path part for operation `createDomain()` */
  static readonly CreateDomainPath = '/domains';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createDomain()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDomain$Response(params: CreateDomain$Params, context?: HttpContext): Observable<StrictHttpResponse<Domain>> {
    return createDomain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createDomain$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDomain(params: CreateDomain$Params, context?: HttpContext): Observable<Domain> {
    return this.createDomain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Domain>): Domain => r.body)
    );
  }

  /** Path part for operation `getArticlesByDomain()` */
  static readonly GetArticlesByDomainPath = '/domains/{id}/articles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getArticlesByDomain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getArticlesByDomain$Response(params: GetArticlesByDomain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Article>>> {
    return getArticlesByDomain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getArticlesByDomain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getArticlesByDomain(params: GetArticlesByDomain$Params, context?: HttpContext): Observable<Array<Article>> {
    return this.getArticlesByDomain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Article>>): Array<Article> => r.body)
    );
  }

}
