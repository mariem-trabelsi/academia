/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Article } from '../models/article';
import { createArticle } from '../fn/article-controller/create-article';
import { CreateArticle$Params } from '../fn/article-controller/create-article';
import { deleteArticle } from '../fn/article-controller/delete-article';
import { DeleteArticle$Params } from '../fn/article-controller/delete-article';
import { getAllArticles } from '../fn/article-controller/get-all-articles';
import { GetAllArticles$Params } from '../fn/article-controller/get-all-articles';
import { getArticleById } from '../fn/article-controller/get-article-by-id';
import { GetArticleById$Params } from '../fn/article-controller/get-article-by-id';
import { getMyArticles } from '../fn/article-controller/get-my-articles';
import { GetMyArticles$Params } from '../fn/article-controller/get-my-articles';
import { uploadArticleCover } from '../fn/article-controller/upload-article-cover';
import { UploadArticleCover$Params } from '../fn/article-controller/upload-article-cover';

@Injectable({ providedIn: 'root' })
export class ArticleControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllArticles()` */
  static readonly GetAllArticlesPath = '/articles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllArticles()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllArticles$Response(params?: GetAllArticles$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Article>>> {
    return getAllArticles(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllArticles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllArticles(params?: GetAllArticles$Params, context?: HttpContext): Observable<Array<Article>> {
    return this.getAllArticles$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Article>>): Array<Article> => r.body)
    );
  }

  /** Path part for operation `createArticle()` */
  static readonly CreateArticlePath = '/articles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createArticle()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createArticle$Response(params: CreateArticle$Params, context?: HttpContext): Observable<StrictHttpResponse<Article>> {
    return createArticle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createArticle$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createArticle(params: CreateArticle$Params, context?: HttpContext): Observable<Article> {
    return this.createArticle$Response(params, context).pipe(
      map((r: StrictHttpResponse<Article>): Article => r.body)
    );
  }

  /** Path part for operation `uploadArticleCover()` */
  static readonly UploadArticleCoverPath = '/articles/file/{article-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadArticleCover()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadArticleCover$Response(params: UploadArticleCover$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadArticleCover(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadArticleCover$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadArticleCover(params: UploadArticleCover$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadArticleCover$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getArticleById()` */
  static readonly GetArticleByIdPath = '/articles/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getArticleById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getArticleById$Response(params?: GetArticleById$Params, context?: HttpContext): Observable<StrictHttpResponse<Article>> {
    return getArticleById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getArticleById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getArticleById(params?: GetArticleById$Params, context?: HttpContext): Observable<Article> {
    return this.getArticleById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Article>): Article => r.body)
    );
  }

  /** Path part for operation `deleteArticle()` */
  static readonly DeleteArticlePath = '/articles/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteArticle()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteArticle$Response(params?: DeleteArticle$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteArticle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteArticle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteArticle(params?: DeleteArticle$Params, context?: HttpContext): Observable<void> {
    return this.deleteArticle$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMyArticles()` */
  static readonly GetMyArticlesPath = '/articles/my';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyArticles()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyArticles$Response(params?: GetMyArticles$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Article>>> {
    return getMyArticles(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyArticles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyArticles(params?: GetMyArticles$Params, context?: HttpContext): Observable<Array<Article>> {
    return this.getMyArticles$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Article>>): Array<Article> => r.body)
    );
  }

}
